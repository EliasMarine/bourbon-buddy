import { NextResponse, NextRequest } from 'next/server';
import { getCurrentUser } from '@/lib/supabase-auth';
import { createClient } from '@/utils/supabase/server';

export async function POST(request: NextRequest) {
  try {
    const user = await getCurrentUser();

    if (!user?.email) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const streamId = request.nextUrl.pathname.split('/')[4];
    const { reason } = await request.json();
    const supabase = await createClient();

    // Get user from database
    const { data: dbUser, error: userError } = await supabase
      .from('User')
      .select('id, email')
      .eq('email', user.email)
      .single();

    if (userError || !dbUser) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }

    // Check if stream exists
    const { data: stream, error: streamError } = await supabase
      .from('Stream')
      .select('id, hostId')
      .eq('id', streamId)
      .single();

    if (streamError || !stream) {
      return NextResponse.json(
        { error: 'Stream not found' },
        { status: 404 }
      );
    }

    // Prevent self-reporting
    if (dbUser.id === stream.hostId) {
      return NextResponse.json(
        { error: 'Cannot report your own stream' },
        { status: 400 }
      );
    }

    // Check if user has already reported this stream
    const { data: existingReport, error: reportError } = await supabase
      .from('StreamReport')
      .select('id')
      .eq('streamId', streamId)
      .eq('userId', dbUser.id)
      .eq('status', 'pending')
      .single();

    if (existingReport) {
      return NextResponse.json(
        { error: 'You have already reported this stream' },
        { status: 400 }
      );
    }

    // Create report
    const { error: createError } = await supabase
      .from('StreamReport')
      .insert({
        streamId,
        userId: dbUser.id,
        reason,
        status: 'pending',
      });

    if (createError) {
      throw createError;
    }

    return NextResponse.json({
      message: 'Stream reported successfully',
    });
  } catch (error) {
    console.error('Stream report POST error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 