import { NextResponse, NextRequest } from 'next/server';
import { getCurrentUser } from '@/lib/supabase-auth';
import { createClient } from '@/utils/supabase/server';

export async function POST(request: NextRequest) {
  try {
    const user = await getCurrentUser();

    if (!user?.email) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const streamId = request.nextUrl.pathname.split('/')[4];
    const supabase = await createClient();

    // Get user from database
    const { data: dbUser, error: userError } = await supabase
      .from('User')
      .select('id, email')
      .eq('email', user.email)
      .single();

    if (userError || !dbUser) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }

    // Get stream and check if it exists
    const { data: stream, error: streamError } = await supabase
      .from('Stream')
      .select('id')
      .eq('id', streamId)
      .single();

    if (streamError || !stream) {
      return NextResponse.json(
        { error: 'Stream not found' },
        { status: 404 }
      );
    }

    // Check if user has already liked the stream
    const { data: existingLike, error: likeError } = await supabase
      .from('StreamLike')
      .select('id')
      .eq('streamId', streamId)
      .eq('userId', dbUser.id)
      .single();

    let isLiked: boolean;
    
    if (existingLike) {
      // Unlike the stream
      await supabase
        .from('StreamLike')
        .delete()
        .eq('streamId', streamId)
        .eq('userId', dbUser.id);
      isLiked = false;
    } else {
      // Like the stream
      await supabase
        .from('StreamLike')
        .insert({
          streamId,
          userId: dbUser.id,
        });
      isLiked = true;
    }

    // Get updated like count
    const { count, error: countError } = await supabase
      .from('StreamLike')
      .select('id', { count: 'exact', head: true })
      .eq('streamId', streamId);

    const likes = count || 0;

    return NextResponse.json({
      likes,
      isLiked,
    });
  } catch (error) {
    console.error('Stream like POST error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 