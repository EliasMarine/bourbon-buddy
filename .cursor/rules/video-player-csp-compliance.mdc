---
description: 
globs: 
alwaysApply: false
---
# Video Player CSP Compliance

This guide documents our approach to ensuring Content Security Policy (CSP) compliance for video players throughout the application, with specific focus on the Mux Player implementation.

## Understanding the CSP Issue

Our application has a strict Content Security Policy that restricts inline styles. This causes errors like:

```
Refused to apply inline style because it violates the following Content Security Policy directive: "style-src 'self' 'nonce-ZDEyNDUzYjMtY2E0OC00Nzk0LTgyZTktODQ4OGExM2IzMDEy' 'unsafe-inline' <URL>"
```

Note that `'unsafe-inline'` is ignored when a nonce value is present, which means we cannot use inline styles in React components.

## Components & Files

- Main Player Component: [src/components/ui/mux-player.tsx](mdc:src/components/ui/mux-player.tsx)
- Playback Page: [src/app/watch/[id]/video-playback-page.tsx](mdc:src/app/watch/[id]/video-playback-page.tsx)
- Player CSS Module: [src/app/watch/[id]/mux-player.module.css](mdc:src/app/watch/[id]/mux-player.module.css)
- Global CSS: [src/app/globals.css](mdc:src/app/globals.css)

## CSP-Compliant Styling Approaches

### 1. CSS Classes Instead of Inline Styles

Instead of using inline styles:

```jsx
// DON'T DO THIS
<mux-player
  style={{
    height: '100%',
    width: '100%',
    backgroundColor: '#000',
  }}
/>
```

Use CSS classes:

```jsx
// DO THIS
<mux-player className="mux-player-full-size" />
```

With corresponding CSS:

```css
.mux-player-full-size {
  height: 100%;
  width: 100%;
  background-color: #000;
}
```

### 2. CSS Variables for Custom Properties

For Mux Player's custom properties, use CSS variables in stylesheet instead of inline:

```css
/* In CSS file */
.mux-player-full-size {
  --controls-backdrop-color: rgba(0, 0, 0, 0.7);
  --media-primary-color: #d97706;
  --media-secondary-color: #FFFFFF;
  --media-object-fit: cover;
}
```

### 3. CSS Modules with :global() for Web Components

For targeting web component internals:

```css
/* In mux-player.module.css */
.muxPlayer :global(mux-player) {
  width: 100% !important;
  height: 100% !important;
}

.muxPlayer :global(mux-player video) {
  object-fit: cover !important;
}
```

### 4. ::part Selectors for Styling Player Elements

Target specific parts of the player with CSS ::part selectors:

```css
.muxPlayer :global(mux-player::part(controls)) {
  z-index: 10 !important;
}

.muxPlayer :global(mux-player::part(media-layer)) {
  width: 100% !important;
  height: 100% !important;
}
```

## Implementation Best Practices

1. Always use CSS modules or global CSS for styles
2. Never use inline style objects with React components
3. Use CSS variables for custom properties
4. Proper container sizing with `aspect-ratio` and positioning
5. Use `object-fit: cover` to ensure video fills container

## Video Sizing & Container Structure

For proper video display:

```jsx
<div className={styles.playerWrapper}>
  <div className={styles.videoContainer}>
    <MuxPlayer className={styles.muxPlayer} />
  </div>
</div>
```

With corresponding CSS:

```css
.playerWrapper {
  width: 100%;
  margin-bottom: 1rem;
  position: relative;
}

.videoContainer {
  position: relative;
  width: 100%;
  aspect-ratio: 16/9;
  border-radius: 0.75rem;
  overflow: hidden;
  display: flex;
}

.muxPlayer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
```

This approach ensures videos display properly while maintaining CSP compliance across all browsers and environments.
